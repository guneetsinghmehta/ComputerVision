function[queryMatchResult]=queryMatch(vectorDatabase,queryImage)
%features right now - sift,dominantColor,dominant3ColorPercent
% weights               1 ,     10      ,   5
% calculate distances of each feature, for sift ? 
% calculate finalValue 1*siftDist+10*domColorDist+5*....
% output one with minimum finalValue
    s1=size(vectorDatabase,1);
    weights=[1,10,5];
    
    image=imread(queryImage);
    image=image(1:scaleDownFactor:end,1:scaleDownFactor:end,:);
    mask=getMask(image);
    image=image.*uint8(mask);
    
    %finding features for the query image
    gray_s=rgb2gray(im2single(image));
    [Fq, Dq] = vl_sift(gray_s);
    [dominantColorq,dominant3ColorPercentq]=dominantColorFn(image,mask);
    for i=1:s1
       % make it scalable with number of features
       Fs=vectorDatabase{i}.Fs;
        Ds=vectorDatabase{i}.Ds;
        dominantColors=vectorDatabase{i}.dominantColor;
        dominant3ColorPercents=vectorDatabase{i}.dominant3ColorPercent;
        
       siftDistance=sdFn(Fs,;
       dominantColorDistance=dcdFn();
       dominant3ColorPercentDistance=d3cpdFn();
    end
    
    queryMatchResult=vectorDatabase{index}.filename;
end